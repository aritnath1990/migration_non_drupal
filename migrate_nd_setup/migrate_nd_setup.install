<?php

/**
 * @file
 * Set up source data and destination configuration for the migration example
 * module. We do this in a separate module so migrate_nd itself is a pure
 * migration module.
 */

function migrate_nd_setup_schema() {
  $schema['migrate_nd_dyn_account'] = migrate_nd_dyn_schema_account();
  $schema['migrate_nd_dyn_node'] = migrate_nd_dyn_schema_node();
  $schema['migrate_nd_dyn_topic'] = migrate_nd_dyn_schema_topic();
  $schema['migrate_nd_dyn_topic_node'] = migrate_nd_dyn_schema_topic_node();

  return $schema;
}

function migrate_nd_setup_install() {
  // Populate our tables.
  migrate_nd_dyn_data_account();
  migrate_nd_dyn_data_node();
  migrate_nd_dyn_data_topic();
  migrate_nd_dyn_data_topic_node();
}

function migrate_nd_dyn_schema_node() {
   return array(
    'description' => 'Migrate Example SSD Styles.',
    'fields' => array(
      'bbid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Ssd ID.',
      ),
      'title'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'dt_created' => array(
        'type' => 'varchar', 
        'length' => 255,
        //'mysql_type' => 'timestamp',
        'not null' => FALSE,
        'description' => 'Full description.',
      ),
      'abstract' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'p',
      ),
      'article' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'a',
      ),
      'aid' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Account Id of the author.',
      ),
      'bodyformat'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('bbid'),
  );
}

function migrate_nd_dyn_schema_topic() {
  return array(
    'description' => 'Categories',
    'fields' => array(
      'style'  => array(
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
      ),
      'details' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'style_parent' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Parent topic, if any',
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Region first associated with this style',
      ),
      'hoppiness' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Relative hoppiness of the dyn',
      ),
    ),
    'primary key' => array('style'),
  );
}

function migrate_nd_dyn_schema_topic_node() {
  return array(
    'description' => 'Dyns topic pairs.',
    'fields' => array(
      'bbid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Dyn ID.',
      ),
      'style'  => array(
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Topic name',
      ),
    ),
    'primary key' => array('style', 'bbid'),
  );
}


function migrate_nd_dyn_schema_account() {
  return array(
    'description' => 'Dyns accounts.',
    'fields' => array(
      'aid'  => array(
        'type' => 'serial',
        //'not null' => TRUE,
        'description' => 'Account ID',
      ),
      'status'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Blocked_Allowed',
      ),
      'registered' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Registration date',
      ),
      'username' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Account name (for login)',
      ),
      'nickname' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Account name (for display)',
      ),
      'password' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Account password (raw)',
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Account email',
      ),
      'sex' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Gender (0 for male, 1 for female)',
      ),
      'dyns' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Favorite Dyns',
      ),
    ),
    'primary key' => array('aid'),
  );
}

function migrate_nd_dyn_data_node() {

$q1 = db_select('res_manager', 'r');
  $obj=$q1->fields('r',array('id','title','dt_created','abstract','article'))//SELECT 
        ->condition('category_id', '20')
        ->execute()->fetchAll();
  
  $i=0;
  foreach ( $obj as $obj1 ) {
    $data[$i][0]=$obj1->id;




    if (substr_count($obj1->title, 'â€™') > 0) {
    $obj1->title=str_replace("â€™","'",$obj1->title);
    }
    if (substr_count($obj1->title, 'â€') > 0) {
    $obj1->title=str_replace("â€","'",$obj1->title);
    }
    $data[$i][1]=$obj1->title;
    $data[$i][2]=$obj1->dt_created;

    if (substr_count($obj1->abstract, 'â€™') > 0) {
    $obj1->abstract=str_replace("â€™","'",$obj1->abstract);
    }
    $obj1->abstract = ucfirst($obj1->abstract); 
    
    $obj1->abstract=str_replace("Summary: ","",$obj1->abstract);
    $obj1->abstract=str_replace("Summary:","",$obj1->abstract);

    /**$obj1->abstract = str_replace(' ', '-', $obj1->abstract); // Replaces all spaces with hyphens.
    $obj1->abstract = preg_replace('/[^A-Za-z0-9\-\.]/', ' ', $obj1->abstract); // Removes special chars.
    $obj1->abstract=preg_replace('/-+/', ' ', $obj1->abstract); // Replaces multiple hyphens with single one.*/

    $a=substr($obj1->abstract, -1);
    if($a!="." && $a!="?") {
    $obj1->abstract =$obj1->abstract ."."; 
    }
    

    $data[$i][3]=$obj1->abstract;

    $r=$obj1->article;
  

    $r=str_replace('Summary: ',"",$r);
    $r=str_replace('Summary:',"",$r);

    $r=preg_replace('/<strong(.*?)>/i','', $r);
    $r=str_replace("</strong>","",$r);

    $r=preg_replace('/<em(.*?)>/i','',$r);
    $r=str_replace("</em>","",$r);

    $r=preg_replace('/<span(.*?)>/i','',$r);
    $r=str_replace("</span>","",$r);

    $r=str_replace("<p>&nbsp;</p>",'',$r);
    $r=str_replace("<p> ","<p>",$r);
    $r=str_replace(" <p>","<p>",$r);

    $r=preg_replace('/<a(.*?)>(.*?)<\/a>/i','',$r);

    $r=str_replace("&nbsp;"," ",$r);
    $r=str_replace("  "," ",$r);
    //$r=preg_replace('/<br(.*?)>/i','',$r);

    
    $r=str_replace("â€™","'",$r);
    $r=str_replace("â€tm","'",$r);
    
    
    $r=str_replace("<p></p>","<p>",$r);
    $r=str_replace("<p><br /></p>","",$r);
    
    $r=str_replace("A student writes:","<blockquote>",$r);
    $r=str_replace("A practitioner writes:","<blockquote>",$r);
    $r=str_replace("A student asks:","<blockquote>",$r);
    $r=str_replace("The student asks:","<blockquote>",$r);
    $r=str_replace("Student:","<blockquote>",$r);
    $r=str_replace("A student says:","<blockquote>",$r);
    $r=str_replace("The student writes:","<blockquote>",$r);
    $r=str_replace("The student continues:","<blockquote>",$r);
    $r=str_replace("reader asks:","<blockquote>",$r);
    
    $r=str_replace("Lama Shenpen replies:","</blockquote>",$r);
    $r=str_replace("Lama Shenpen responds:","</blockquote>",$r);
    $r=str_replace("Lama Shenpen:","</blockquote>",$r);
    $r=str_replace("Shenpen replies:","</blockquote>",$r);
    $r=str_replace("Shenpen:","</blockquote>",$r);
    $r=str_replace("Lama:","</blockquote>",$r);


    $r=str_replace("<p><blockquote></p>","<blockquote>",$r);
    $r=str_replace("<p></blockquote></p>","</blockquote>",$r);

    if (substr_count($r, 'Summary: ') > 0 ) {
      $r=str_replace('Summary: ',"",$r);
    }
    if (substr_count($r, 'Summary:') > 0 ) {
      $r=str_replace('Summary:',"",$r);
    }
    $r=str_replace($obj1->abstract,"",$r);
//================================================================
$r=str_replace("<p>&nbsp;</p>",'',$r);
    $r=str_replace("<p> ","<p>",$r);
    $r=str_replace(" <p>","<p>",$r);

    $r=preg_replace('/<a(.*?)>(.*?)<\/a>/i','',$r);

    $r=str_replace("&nbsp;","",$r);
    $r=str_replace("  "," ",$r);
    //$r=preg_replace('/<br(.*?)>/i','',$r);

    
    $r=str_replace("â€™","'",$r);
    $r=str_replace("â€tm","'",$r);
    
    $r=str_replace("<p><br />","<p>",$r);
    $r=str_replace("<p>&nbsp;","<p>",$r);
    $r=str_replace("<p></p>","<p>",$r);
    $r=str_replace("<blockquote><br />","<blockquote>",$r);
    $r=str_replace("<br /><br /><blockquote>","<blockquote>",$r);
    $r=str_replace("<br /><blockquote>","<blockquote>",$r);
    $r=str_replace("<blockquote><br /><br />","<blockquote>",$r);
    $r=str_replace("<blockquote><br />","<blockquote>",$r);
    $r=str_replace("<br />&nbsp;</blockquote>","</blockquote>",$r);
    $r=str_replace("<p>&nbsp;</p>","",$r);
    $r=str_replace("<p><br />&nbsp;</p>","",$r);
    $r=str_replace("<p><br />&nbsp;<br /></p>","",$r);
    $r=str_replace("<p>&nbsp;<br /></p>","",$r);
    $r=str_replace("<p> <br /> <blockquote> <br /> ","<blockquote>",$r);
    $r=str_replace("<br /> <br /> </blockquote><br /> <br /> ","</blockquote>",$r);
    $r=str_replace("<p><br /><blockquote><br />","<blockquote>",$r);
    $r=str_replace("<br /><br /></blockquote><br /><br />","</blockquote>",$r);
    $r=str_replace("<p><blockquote> </p>","<blockquote>",$r);
    $r=str_replace("<p>","",$r);
    $r=str_replace("</p>","",$r);
    //$r=str_replace("","",$r);

    
//================================================================
    

    $data[$i][4]=$r;//obj1->article;
    $data[$i][5]=1;
    $data[$i][6]="basic_html";
    $i+=1;

  }


 $fields = array('bbid', 'title', 'dt_created','abstract','article','aid','bodyformat');
  $query = db_insert('migrate_nd_dyn_node')
           ->fields($fields);
  // Use high id numbers to avoid overwriting an existing node id.
  
  foreach ($data as $row) {
    $query->values(array_combine($fields, $row));
  }
  $query->execute();
}

// Note that alice has duplicate username. Exercises dedupe_entity plugin.
// @TODO duplicate email also.
function migrate_nd_dyn_data_account() {
  $fields = array('status', 'registered', 'username', 'nickname', 'password', 'email', 'sex', 'dyns');
  $query = db_insert('migrate_nd_dyn_account')
    ->fields($fields);
  $data = array(
    array(1, '2010-03-30 10:31:05', 'Jonathan', 'Jonathan in Irnland', 'alicepass', 'alice@example.com', '1', '1|2|3'),
    );
  foreach ($data as $row) {
    $query->values(array_combine($fields, $row));
  }
  $query->execute();
}


function migrate_nd_dyn_data_topic() {
$fields = array('style', 'details', 'style_parent', 'region', 'hoppiness');
$obj = db_query('SELECT distinct(class_name)
FROM res_classifications order by class_name');
$i=0;
  foreach ( $obj as $obj1 ) {
    $data[$i][0]=$obj1->class_name;
    $data[$i][1]=NULL;
    $data[$i][2]=NULL;
    $data[$i][3]=NULL;
    $data[$i][4]=NULL;
    $i+=1;
  }
  $query = db_insert('migrate_nd_dyn_topic')
    ->fields($fields);
  foreach ($data as $row) {
    $query->values(array_combine($fields, $row));
  }
  $query->execute();


  /**$fields = array('style', 'details', 'style_parent', 'region', 'hoppiness');
  $query = db_insert('migrate_nd_dyn_topic')
    ->fields($fields);
  $data = array(
    array('Miscellaneous Heart of Awakening', 'traditional', NULL, 'Medieval British Isles', 'Medium'),
   );
  foreach ($data as $row) {
    $query->values(array_combine($fields, $row));
  }
  $query->execute();*/
}

function migrate_nd_dyn_data_topic_node() {
  $fields = array('bbid', 'style');


  $obj = db_query('SELECT lrc.res_id, rc.class_name
FROM lnk_res_class lrc, res_classifications rc, res_manager rm
WHERE lrc.class_id = rc.id
AND rm.id = lrc.res_id
AND rm.category_id =20');

       /** $query = db_select('lnk_res_class', 'lrc');
$query->join('res_classifications', 'rc', 'rc.id = lrc.class_id');
$query->join('res_manager', 'rm', 'rm.id = lrc.res_id');
$obj = $query
  ->fields('lrc', array('res_id'))
  ->fields('rc', array('class_name'))
  ->fields('rm', array('category_id'))
  ->condition('category_id','20')
  ->execute();*/
  
  $i=0;
  foreach ( $obj as $obj1 ) {
    $data[$i][0]=$obj1->res_id;
    $data[$i][1]=$obj1->class_name;
    $i+=1;
  }


  $query = db_insert('migrate_nd_dyn_topic_node')
    ->fields($fields);
  foreach ($data as $row) {
    $query->values(array_combine($fields, $row));
  }
  $query->execute();
}
